/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as LoginImport } from './routes/login'
import { Route as DownloadIndexImport } from './routes/download/index'
import { Route as DiscordIndexImport } from './routes/discord/index'
import { Route as GithubNameImport } from './routes/github/$name'
import { Route as DownloadPrivateImport } from './routes/download/private'
import { Route as PluginsProvidersIndexImport } from './routes/plugins/providers/index'
import { Route as PluginsProvidersAddIndexImport } from './routes/plugins/providers/add/index'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const DownloadIndexRoute = DownloadIndexImport.update({
  id: '/download/',
  path: '/download/',
  getParentRoute: () => rootRoute,
} as any)

const DiscordIndexRoute = DiscordIndexImport.update({
  id: '/discord/',
  path: '/discord/',
  getParentRoute: () => rootRoute,
} as any)

const GithubNameRoute = GithubNameImport.update({
  id: '/github/$name',
  path: '/github/$name',
  getParentRoute: () => rootRoute,
} as any)

const DownloadPrivateRoute = DownloadPrivateImport.update({
  id: '/download/private',
  path: '/download/private',
  getParentRoute: () => rootRoute,
} as any)

const PluginsProvidersIndexRoute = PluginsProvidersIndexImport.update({
  id: '/plugins/providers/',
  path: '/plugins/providers/',
  getParentRoute: () => rootRoute,
} as any)

const PluginsProvidersAddIndexRoute = PluginsProvidersAddIndexImport.update({
  id: '/plugins/providers/add/',
  path: '/plugins/providers/add/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/download/private': {
      id: '/download/private'
      path: '/download/private'
      fullPath: '/download/private'
      preLoaderRoute: typeof DownloadPrivateImport
      parentRoute: typeof rootRoute
    }
    '/github/$name': {
      id: '/github/$name'
      path: '/github/$name'
      fullPath: '/github/$name'
      preLoaderRoute: typeof GithubNameImport
      parentRoute: typeof rootRoute
    }
    '/discord/': {
      id: '/discord/'
      path: '/discord'
      fullPath: '/discord'
      preLoaderRoute: typeof DiscordIndexImport
      parentRoute: typeof rootRoute
    }
    '/download/': {
      id: '/download/'
      path: '/download'
      fullPath: '/download'
      preLoaderRoute: typeof DownloadIndexImport
      parentRoute: typeof rootRoute
    }
    '/plugins/providers/': {
      id: '/plugins/providers/'
      path: '/plugins/providers'
      fullPath: '/plugins/providers'
      preLoaderRoute: typeof PluginsProvidersIndexImport
      parentRoute: typeof rootRoute
    }
    '/plugins/providers/add/': {
      id: '/plugins/providers/add/'
      path: '/plugins/providers/add'
      fullPath: '/plugins/providers/add'
      preLoaderRoute: typeof PluginsProvidersAddIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/download/private': typeof DownloadPrivateRoute
  '/github/$name': typeof GithubNameRoute
  '/discord': typeof DiscordIndexRoute
  '/download': typeof DownloadIndexRoute
  '/plugins/providers': typeof PluginsProvidersIndexRoute
  '/plugins/providers/add': typeof PluginsProvidersAddIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/download/private': typeof DownloadPrivateRoute
  '/github/$name': typeof GithubNameRoute
  '/discord': typeof DiscordIndexRoute
  '/download': typeof DownloadIndexRoute
  '/plugins/providers': typeof PluginsProvidersIndexRoute
  '/plugins/providers/add': typeof PluginsProvidersAddIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/download/private': typeof DownloadPrivateRoute
  '/github/$name': typeof GithubNameRoute
  '/discord/': typeof DiscordIndexRoute
  '/download/': typeof DownloadIndexRoute
  '/plugins/providers/': typeof PluginsProvidersIndexRoute
  '/plugins/providers/add/': typeof PluginsProvidersAddIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/signup'
    | '/download/private'
    | '/github/$name'
    | '/discord'
    | '/download'
    | '/plugins/providers'
    | '/plugins/providers/add'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/signup'
    | '/download/private'
    | '/github/$name'
    | '/discord'
    | '/download'
    | '/plugins/providers'
    | '/plugins/providers/add'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/signup'
    | '/download/private'
    | '/github/$name'
    | '/discord/'
    | '/download/'
    | '/plugins/providers/'
    | '/plugins/providers/add/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  LoginRoute: typeof LoginRoute
  SignupRoute: typeof SignupRoute
  DownloadPrivateRoute: typeof DownloadPrivateRoute
  GithubNameRoute: typeof GithubNameRoute
  DiscordIndexRoute: typeof DiscordIndexRoute
  DownloadIndexRoute: typeof DownloadIndexRoute
  PluginsProvidersIndexRoute: typeof PluginsProvidersIndexRoute
  PluginsProvidersAddIndexRoute: typeof PluginsProvidersAddIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  LoginRoute: LoginRoute,
  SignupRoute: SignupRoute,
  DownloadPrivateRoute: DownloadPrivateRoute,
  GithubNameRoute: GithubNameRoute,
  DiscordIndexRoute: DiscordIndexRoute,
  DownloadIndexRoute: DownloadIndexRoute,
  PluginsProvidersIndexRoute: PluginsProvidersIndexRoute,
  PluginsProvidersAddIndexRoute: PluginsProvidersAddIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/signup",
        "/download/private",
        "/github/$name",
        "/discord/",
        "/download/",
        "/plugins/providers/",
        "/plugins/providers/add/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/download/private": {
      "filePath": "download/private.tsx"
    },
    "/github/$name": {
      "filePath": "github/$name.tsx"
    },
    "/discord/": {
      "filePath": "discord/index.tsx"
    },
    "/download/": {
      "filePath": "download/index.tsx"
    },
    "/plugins/providers/": {
      "filePath": "plugins/providers/index.tsx"
    },
    "/plugins/providers/add/": {
      "filePath": "plugins/providers/add/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
